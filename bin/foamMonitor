#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2015-2017 OpenFOAM Foundation
#    \\/     M anipulation  | Copyright (C) 2017 CONSELF srl
#-------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     foamMonitor
#
# Description
#     Monitor data with Gnuplot from time-value(s) graphs written by OpenFOAM
#     e.g. by functionObjects
#     - requires gnuplot, gnuplot_x11
#
#------------------------------------------------------------------------------
usage() {
    cat<<USAGE

Usage: ${0##*/} [OPTION] <file>
options:
  -help     | -h         print the usage
  -idle     | -i <time>  stops if <file> unchanging for <time> sec (default 60s)
  -logscale | -l         plots data (y-axis) on log scale, e.g. for residuals
  -refresh  | -r <time>  refreshes display every <time> sec (default 10s)
  -yrange   | -y <range> sets data (y-axis) <range>, format "[0:1]"

Monitor data with Gnuplot from time-value(s) graphs written by OpenFOAM
e.g. by functionObjects
- requires gnuplot, gnuplot_x11

Example:
  foamMonitor -l postProcessing/residuals/0/residuals.dat

USAGE
}

error() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    usage
    exit 1
}

plotFileHeader() {
    cat<<EOF
#!/bin/sh
gnuplot > /dev/null 2>&1 << EOF
set term png
$LOGSCALE
$YRANGE
set title "Data Monitoring"
set xlabel "$XLABEL"
set grid
plot \\
EOF
}

plotFileFooter() {
    cat<<EOF
set output "residuals.png"
replot
EOF
}

howMany() ( set -f; set -- $1; echo $# )

IDLE=60
REFRESH=10
LOGSCALE=""
YRANGE=""
GNUPLOT=$(which gnuplot)
! [ "x$GNUPLOT" = "x" ] || usage "Gnuplot not installed"

# parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage
        ;;
    -i | -idle)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        [ ! -z "${2##*[!0-9]*}" ] && IDLE=$2 || usage "Argument of '$1' is not an integer: '$2'"
        shift 2
        ;;
    -l | -logscale)
        LOGSCALE="set logscale y"
        shift 1
        ;;
    -r | -refresh)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        [ ! -z "${2##*[!0-9]*}" ] && REFRESH=$2 || usage "Argument of '$1' is not an integer: '$2'"
        shift 2
        ;;
    -y | -yrange)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        YRANGE="set yrange $2"
        shift 2
        ;;
    -*)
        usage "unknown option: '$*'"
        ;;
    *)
        break
        ;;
    esac
done

[ $# -eq 1 ] || usage "Incorrect arguments specified"
[ -f $1 ]    || usage "File $1 does not exit"
FILE=$1

# Get KEYS from header
KEYS=$(grep -E '^#' $FILE | tail -1)

[ "x$KEYS" = "x" ] && KEYS="# Step"
NKEYS=$(howMany "$KEYS")
NCOLS=$(tail -1 $FILE | awk '{ print NF}')

# With full column labels, NKEYS = NCOLS + 1, since it includes "#"

# If NKEYS > NCOLS + 1, REMOVE EXCESS KEYS
NCOLSPONE=$(expr $NCOLS + 1)
[ "$NKEYS" -gt "$NCOLSPONE" ] && KEYS=$(echo $KEYS | cut -d" " -f1-$NCOLSPONE)
NKEYS=$(howMany "$KEYS")

i=0
while [ "$NKEYS" -le "$NCOLS" ]
do
    i=$(expr $i + 1)
    KEYS="$KEYS data$i"
    NKEYS=$(howMany "$KEYS")
done

# Remove # and Time keys
XLABEL=$(echo $KEYS | cut -d " " -f2)
KEYS=$(echo $KEYS | cut -d " " -f3-)

GPFILE=$(mktemp)
plotFileHeader > $GPFILE
i=1
for field in $KEYS
do
    i=$(expr $i + 1)
    PLOTLINE="\"$FILE\" using 1:${i} with lines title \"$field\""
    if [ $i -lt $NCOLS ]
    then
       PLOTLINE="$PLOTLINE, \\"
    fi
    echo $PLOTLINE >> $GPFILE
done
plotFileFooter >> $GPFILE
echo "EOF" >> $GPFILE

touch $FILE
chmod +x $GPFILE
$GPFILE

rm $GPFILE

#------------------------------------------------------------------------------
